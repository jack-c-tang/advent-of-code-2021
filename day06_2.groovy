def fishes = [1,1,1,2,1,1,2,1,1,1,5,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,4,1,1,1,1,3,1,1,3,1,1,1,4,1,5,1,3,1,1,1,1,1,5,1,1,1,1,1,5,5,2,5,1,1,2,1,1,1,1,3,4,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,5,4,1,1,1,1,1,5,1,2,4,1,1,1,1,1,3,3,2,1,1,4,1,1,5,5,1,1,1,1,1,2,5,1,4,1,1,1,1,1,1,2,1,1,5,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,3,1,1,3,1,3,1,4,1,5,4,1,1,2,1,1,5,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,4,1,1,4,1,1,1,1,1,1,1,5,4,1,2,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,4,1,1,1,2,1,4,1,1,1,1,1,1,1,1,1,4,2,1,2,1,1,4,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,3,2,1,4,1,5,1,1,1,4,5,1,1,1,1,1,1,5,1,1,5,1,2,1,1,2,4,1,1,2,1,5,5,3]
// fishes=[3,4,3,1,2]
def totalDays = 256
map = [:]

def cal(days, number) {
    if (number == 8 && days < 9) {
        return 0
    } else if (number != 8) {
        return cal(days+8-number, 8)
    } else if (map[days]) {
        return map[days]
    }
    def total = ((days-9)/7 as Integer) + 1
    total += cal(days-9, 8)
    
    def left = days-9-7
    while (left >= 9) {
        total += cal(left, 8)
        left -= 7
    }
    map[days] = total as Long
    return map[days]
}

def totalAll = fishes.size()
fishes.each { f ->
    totalAll += cal(totalDays, f)
}

println(map)
totalAll
​
​

// (18,3) = (23,8) = (23-9)/7+1 + (14,8) + (7,8)
//                 = (23-9)/7+1 + (14-9)/7+1 + (5,8) + (7,8)
//                 = 3 + 1 = 4

// (18,1) = (25,8) = (25-9)/7+1 + (16,8) + (9,8)
//                 = (25-9)/7+1 + (16-9)/7+1 + (7,8) + (9,8)
//                 = (25-9)/7+1 + (16-9)/7+1 + 0 + 1
//                 = 3 + 2 + 1 = 6

// (18,4) = (22,8) = 2 + (13,8) + (6,8)
//                 = 2 + (13-9)/7+1 + (6,8)
//                 = 2 + 1 = 3

// (18,2) = (24,8) = 3 + (15,8) + (8,8)
//                 = 3 + (15-9)/7+1 + (6,8) + 0
//                 = 4